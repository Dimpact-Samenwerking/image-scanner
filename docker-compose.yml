services:
  image-discovery:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dimpact-image-discovery
    volumes:
      - ./results:/results
      - ./scripts:/app/scripts
      - ./helm-charts:/app/helm-charts  # Mount Helm charts directory
      - /var/run/docker.sock:/var/run/docker.sock  # Mount Docker socket for --check-images
    working_dir: /app
    environment:
      - OUTPUT_DIR=/results
      - DOCKER_HOST=unix:///var/run/docker.sock
    # Run once and exit
    restart: "no"
    entrypoint: ["/app/scripts/dimpact-image-discovery.sh"]

  image-extractor:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dimpact-image-extractor
    volumes:
      - ./results:/results
      - ./scripts:/app/scripts
    working_dir: /app
    environment:
      - OUTPUT_DIR=/results
    # Keep container running for interactive use
    tty: true
    stdin_open: true
    # Stop on error
    restart: "no"

  image-scanner:
    build: .
    container_name: dimpact-image-scanner
    privileged: true  # Required for Docker-in-Docker
    environment:
      - PERFORMANCE_MODE=max
      - SEVERITY_THRESHOLD=MEDIUM
      - TRIVY_VERSION=aquasec/trivy:latest
      - GRYPE_VERSION=anchore/grype:latest
      - SYFT_VERSION=anchore/syft:latest
      - YQ_VERSION=mikefarah/yq:latest
      - OUTPUT_DIR=/results
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Mount Docker socket
      - ./results:/results  # Mount results directory to host's ./results
      - ./scripts:/app/scripts  # Mount scripts directory
      - ./helm-charts:/app/helm-charts  # Mount Helm charts directory
      - ./cache/trivy:/cache/trivy  # Persistent Trivy cache
      - ./cache/grype:/cache/grype  # Persistent Grype cache
    deploy:
      resources:
        limits:
          cpus: '0.0'  # Use all available CPUs
          memory: '0'  # Use all available memory
        reservations:
          cpus: '0.0'
          memory: '0'
    working_dir: /app
    command: ["/app/scripts/dimpact-image-scanner.sh"]
    # Stop on error
    restart: "no"

volumes:
  trivy-cache:
  grype-cache: 

# Usage Examples:
#
# Run image discovery (batch operation - runs once and exits):
#   docker-compose run image-discovery                                    # Default: discover and display images
#   docker-compose run image-discovery --output-file                      # Discover and save to discovered.yaml
#   docker-compose run image-discovery --check-images                     # Discover and check image availability  
#   docker-compose run image-discovery --output-file --check-images       # Save to file and check availability
#   docker-compose run image-discovery --help                             # Show help
#
# Run image extraction service:
#   docker-compose up image-extractor
#
# Run image scanning service:
#   docker-compose up image-scanner
#
# Clean up all containers:
#   docker-compose down
#
# View results:
#   ls -la ./results/
